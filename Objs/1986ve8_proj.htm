<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objs\1986ve8_proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objs\1986ve8_proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Mar 19 11:58:27 2021
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; bdd_init &rArr; adc_init &rArr; adc_set_ch_a_b
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemoryMngFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemoryMngFault_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVCall_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVCall_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">Systick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">Systick_Handler</a><BR>
 <LI><a href="#[d]">FT_IF0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">FT_IF0_Handler</a><BR>
 <LI><a href="#[e]">FT_IF1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">FT_IF1_Handler</a><BR>
 <LI><a href="#[f]">FT_IF2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">FT_IF2_Handler</a><BR>
 <LI><a href="#[10]">FT_IF3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">FT_IF3_Handler</a><BR>
 <LI><a href="#[11]">CLK_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">CLK_IF_Handler</a><BR>
 <LI><a href="#[12]">PVD_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PVD_IF_Handler</a><BR>
 <LI><a href="#[13]">RTC_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">RTC_IF_Handler</a><BR>
 <LI><a href="#[14]">BKP_IF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BKP_IF_Handler</a><BR>
 <LI><a href="#[15]">EXT_INTERROR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">EXT_INTERROR0_Handler</a><BR>
 <LI><a href="#[16]">EXT_INTERROR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">EXT_INTERROR1_Handler</a><BR>
 <LI><a href="#[17]">EXT_INTERROR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">EXT_INTERROR2_Handler</a><BR>
 <LI><a href="#[18]">EXT_INTERROR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">EXT_INTERROR3_Handler</a><BR>
 <LI><a href="#[19]">EXT_INTERROR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EXT_INTERROR4_Handler</a><BR>
 <LI><a href="#[1a]">EXT_INTERROR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">EXT_INTERROR5_Handler</a><BR>
 <LI><a href="#[1b]">EXT_INTERROR6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">EXT_INTERROR6_Handler</a><BR>
 <LI><a href="#[1c]">EXT_INTERROR7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">EXT_INTERROR7_Handler</a><BR>
 <LI><a href="#[1d]">IF_ERR_SCR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IF_ERR_SCR_Handler</a><BR>
 <LI><a href="#[1e]">IF_FIN_SCR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IF_FIN_SCR_Handler</a><BR>
 <LI><a href="#[1f]">DMA_ERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DMA_ERR_Handler</a><BR>
 <LI><a href="#[20]">DMA_DONE0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DMA_DONE0_Handler</a><BR>
 <LI><a href="#[21]">DMA_DONE1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DMA_DONE1_Handler</a><BR>
 <LI><a href="#[22]">IRQ_PORTA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ_PORTA_Handler</a><BR>
 <LI><a href="#[23]">IRQ_PORTB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ_PORTB_Handler</a><BR>
 <LI><a href="#[24]">IRQ_PORTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ_PORTC_Handler</a><BR>
 <LI><a href="#[25]">IRQ_PORTD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ_PORTD_Handler</a><BR>
 <LI><a href="#[26]">IRQ_PORTE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ_PORTE_Handler</a><BR>
 <LI><a href="#[27]">IRQ_PORTF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">IRQ_PORTF_Handler</a><BR>
 <LI><a href="#[28]">INT_ETH0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">INT_ETH0_Handler</a><BR>
 <LI><a href="#[29]">INT_ETH1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">INT_ETH1_Handler</a><BR>
 <LI><a href="#[2a]">INT_SPW0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">INT_SPW0_Handler</a><BR>
 <LI><a href="#[2b]">INT_SPW1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">INT_SPW1_Handler</a><BR>
 <LI><a href="#[2f]">INT_TMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">INT_TMR3_Handler</a><BR>
 <LI><a href="#[30]">INT_TMR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">INT_TMR4_Handler</a><BR>
 <LI><a href="#[31]">INT_TMR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">INT_TMR5_Handler</a><BR>
 <LI><a href="#[32]">INT_CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">INT_CAN0_Handler</a><BR>
 <LI><a href="#[33]">INT_CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">INT_CAN1_Handler</a><BR>
 <LI><a href="#[34]">INT_CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">INT_CAN2_Handler</a><BR>
 <LI><a href="#[35]">INT_CAN3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">INT_CAN3_Handler</a><BR>
 <LI><a href="#[36]">INT_CAN4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">INT_CAN4_Handler</a><BR>
 <LI><a href="#[37]">INT_SSP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">INT_SSP0_Handler</a><BR>
 <LI><a href="#[38]">INT_SSP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">INT_SSP1_Handler</a><BR>
 <LI><a href="#[39]">INT_SSP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">INT_SSP2_Handler</a><BR>
 <LI><a href="#[3a]">INT_SSP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">INT_SSP3_Handler</a><BR>
 <LI><a href="#[3c]">INT_UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">INT_UART1_Handler</a><BR>
 <LI><a href="#[3d]">INT_UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">INT_UART2_Handler</a><BR>
 <LI><a href="#[3e]">INT_UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">INT_UART3_Handler</a><BR>
 <LI><a href="#[3f]">INT_USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">INT_USB_Handler</a><BR>
 <LI><a href="#[40]">INT_RX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">INT_RX_ARC0_Handler</a><BR>
 <LI><a href="#[41]">INT_TX_ARC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">INT_TX_ARC0_Handler</a><BR>
 <LI><a href="#[42]">INT_RX_ARC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">INT_RX_ARC1_Handler</a><BR>
 <LI><a href="#[43]">INT_TX_ARC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">INT_TX_ARC1_Handler</a><BR>
 <LI><a href="#[45]">INT_MIL1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">INT_MIL1_Handler</a><BR>
 <LI><a href="#[47]">INT_ADC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">INT_ADC1_Handler</a><BR>
 <LI><a href="#[48]">INT_DAC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">INT_DAC0_Handler</a><BR>
 <LI><a href="#[49]">INT_DAC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">INT_DAC1_Handler</a><BR>
 <LI><a href="#[4a]">INT_CRYPTO_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">INT_CRYPTO_Handler</a><BR>
 <LI><a href="#[4b]">INT_CRC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">INT_CRC_Handler</a><BR>
 <LI><a href="#[4c]">INT_ECC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">INT_ECC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">BKP_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[11]">CLK_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[20]">DMA_DONE0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[21]">DMA_DONE1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1f]">DMA_ERR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[15]">EXT_INTERROR0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[16]">EXT_INTERROR1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[17]">EXT_INTERROR2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[18]">EXT_INTERROR3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[19]">EXT_INTERROR4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1a]">EXT_INTERROR5_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1b]">EXT_INTERROR6_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1c]">EXT_INTERROR7_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[d]">FT_IF0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[e]">FT_IF1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[f]">FT_IF2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[10]">FT_IF3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1d]">IF_ERR_SCR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[1e]">IF_FIN_SCR_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[46]">INT_ADC0_Handler</a> from adc.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[47]">INT_ADC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[32]">INT_CAN0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[33]">INT_CAN1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[34]">INT_CAN2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[35]">INT_CAN3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[36]">INT_CAN4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4b]">INT_CRC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4a]">INT_CRYPTO_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[48]">INT_DAC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[49]">INT_DAC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4c]">INT_ECC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[28]">INT_ETH0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[29]">INT_ETH1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[44]">INT_MIL0_Handler</a> from mpi.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[45]">INT_MIL1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[40]">INT_RX_ARC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[42]">INT_RX_ARC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2a]">INT_SPW0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2b]">INT_SPW1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[37]">INT_SSP0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[38]">INT_SSP1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[39]">INT_SSP2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3a]">INT_SSP3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2c]">INT_TMR0_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2d]">INT_TMR1_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2e]">INT_TMR2_Handler</a> from timers.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[2f]">INT_TMR3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[30]">INT_TMR4_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[31]">INT_TMR5_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[41]">INT_TX_ARC0_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[43]">INT_TX_ARC1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3b]">INT_UART0_Handler</a> from uarts.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3c]">INT_UART1_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3d]">INT_UART2_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3e]">INT_UART3_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[3f]">INT_USB_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[22]">IRQ_PORTA_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[23]">IRQ_PORTB_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[24]">IRQ_PORTC_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[25]">IRQ_PORTD_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[26]">IRQ_PORTE_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[27]">IRQ_PORTF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[7]">MemoryMngFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[12]">PVD_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[13]">RTC_IF_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[a]">SVCall_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[c]">Systick_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_mdr1986ve8t.o(.text) referenced from startup_mdr1986ve8t.o(RESET)
 <LI><a href="#[51]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve8t.o(.text)
 <LI><a href="#[4f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4e]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[50]">fputc</a> from debug.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[51]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[54]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11f]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[120]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[57]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[58]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[121]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[63]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[123]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[5c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[124]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[125]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[126]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[5e]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[12a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[130]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[131]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[134]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[135]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[136]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[13a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[13c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[13d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[53]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[13f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[60]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[62]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[140]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[64]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bdd_init &rArr; adc_init &rArr; adc_set_ch_a_b
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[141]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[67]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[142]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[69]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[71]"></a>WDT_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>dbg_print</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fputc &rArr; UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>System_Init</STRONG> (Thumb, 450 bytes, Stack size 0 bytes, sysinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 936 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; bdd_init &rArr; adc_init &rArr; adc_set_ch_a_b
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_desired_value
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_coeff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_set_mode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_parameter_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[81]"></a>INT_ADC0_CallBack</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = INT_ADC0_CallBack &rArr; adc_new_val_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_new_val_process
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC0_Handler
</UL>

<P><STRONG><a name="[72]"></a>UART0_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>GetCRC</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendPacket
</UL>

<P><STRONG><a name="[6d]"></a>UART0_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, uarts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART0_SendPacket &rArr; GetCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>

<P><STRONG><a name="[148]"></a>UART0_PacketInWaitingOrReady</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uarts.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>UART0_GetPacket</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uarts.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRC
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[3b]"></a>INT_UART0_Handler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uarts.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>adc_set_ch_a_b</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_set_ch_a_b
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[88]"></a>adc_init</STRONG> (Thumb, 208 bytes, Stack size 272 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = adc_init &rArr; adc_set_ch_a_b
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_ch_a_b
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[8d]"></a>adc_ch_voltage</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_ch_voltage &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process
</UL>

<P><STRONG><a name="[92]"></a>calc_mcu_temp</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = calc_mcu_temp &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process
</UL>

<P><STRONG><a name="[95]"></a>adc_process</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adc_process &rArr; calc_mcu_temp &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ch_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[b0]"></a>adc_get_ch_voltage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_get_ch_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp
</UL>

<P><STRONG><a name="[149]"></a>get_mcu_temp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>adc_new_val_process</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_new_val_process
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC0_CallBack
</UL>

<P><STRONG><a name="[46]"></a>INT_ADC0_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = INT_ADC0_Handler &rArr; INT_ADC0_CallBack &rArr; adc_new_val_process
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC0_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Timers_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timers_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>INT_TMR0_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>INT_TMR1_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>INT_TMR2_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timers.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Timers_Start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>Timers_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[77]"></a>Timers_Status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timers_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>Time_Set</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[9b]"></a>Get_Time_s</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_system_frame_form
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_oai_dd_frame_form
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Interval
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInterval
</UL>

<P><STRONG><a name="[14a]"></a>Get_Time_sec_parts</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>SetInterval</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>

<P><STRONG><a name="[9c]"></a>Check_Interval</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>

<P><STRONG><a name="[14b]"></a>Timer_PWM_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>Timer_PWM_Set_Fp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer_PWM_Set_Fp &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
</UL>

<P><STRONG><a name="[a1]"></a>dac_set_ch_a_b</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dac_set_ch_a_b
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
</UL>

<P><STRONG><a name="[a0]"></a>dac_init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dac_init &rArr; dac_set_ch_a_b
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_a_b
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[a2]"></a>dac_set_voltage</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>

<P><STRONG><a name="[a6]"></a>dac_set_ch_voltage</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dac_set_ch_voltage &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
</UL>

<P><STRONG><a name="[14c]"></a>dac_set_code</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, dac.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>gpio_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[82]"></a>gpio_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC0_CallBack
</UL>

<P><STRONG><a name="[14d]"></a>gpio_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>tres_set_parameters</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, termo_res.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tres_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_init
</UL>

<P><STRONG><a name="[a7]"></a>tres_init</STRONG> (Thumb, 58 bytes, Stack size 152 bytes, termo_res.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tres_init &rArr; tres_set_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[a9]"></a>_linear_interpolation</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, termo_res.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _linear_interpolation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp
</UL>

<P><STRONG><a name="[ad]"></a>_calc_tr_res</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, termo_res.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _calc_tr_res &rArr; __aeabi_cfcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp
</UL>

<P><STRONG><a name="[af]"></a>tres_get_temp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, termo_res.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tres_get_temp &rArr; _linear_interpolation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_tr_res
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_ch_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp_u16
</UL>

<P><STRONG><a name="[b1]"></a>tres_get_temp_u16</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, termo_res.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tres_get_temp_u16 &rArr; tres_get_temp &rArr; _linear_interpolation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
</UL>

<P><STRONG><a name="[b3]"></a>pid_refreshet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oai_dd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_desired_value
</UL>

<P><STRONG><a name="[7f]"></a>pid_set_desired_value</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pid_set_desired_value
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_refreshet
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>pid_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, oai_dd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
</UL>

<P><STRONG><a name="[b4]"></a>pid_init</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pid_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_init
</UL>

<P><STRONG><a name="[b7]"></a>oai_dd_reset_val</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oai_dd_reset_val
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_init
</UL>

<P><STRONG><a name="[b6]"></a>oai_dd_init</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = oai_dd_init &rArr; oai_dd_reset_val
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_reset_val
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_desired_value
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_parameter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[7a]"></a>oai_dd_set_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oai_dd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>oai_dd_get_frame_report</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = oai_dd_get_frame_report &rArr; tres_get_temp_u16 &rArr; tres_get_temp &rArr; _linear_interpolation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_get_value
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp_u16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
</UL>

<P><STRONG><a name="[bc]"></a>pid_step_calc</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pid_step_calc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_resistance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_current
</UL>

<P><STRONG><a name="[bd]"></a>oai_dd_pid_current</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = oai_dd_pid_current &rArr; pid_step_calc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
</UL>

<P><STRONG><a name="[c0]"></a>oai_dd_pid_resistance</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = oai_dd_pid_resistance &rArr; pid_step_calc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
</UL>

<P><STRONG><a name="[c1]"></a>oai_dd_process</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = oai_dd_process &rArr; oai_dd_get_frame_report &rArr; tres_get_temp_u16 &rArr; tres_get_temp &rArr; _linear_interpolation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_resistance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_current
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_voltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_ch_voltage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[c3]"></a>oai_dd_get_str_report</STRONG> (Thumb, 168 bytes, Stack size 240 bytes, oai_dd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[80]"></a>pid_set_coeff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oai_dd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pid_set_coeff
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>pid_get_str_report</STRONG> (Thumb, 120 bytes, Stack size 200 bytes, oai_dd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[74]"></a>mpi_init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>mpi_process</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>mpi_get_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>mpi_set_busy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_wr_to_subaddr
</UL>

<P><STRONG><a name="[c9]"></a>mpi_release_busy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_wr_to_subaddr
</UL>

<P><STRONG><a name="[14f]"></a>mpi_set_aw_bit_7</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mpi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>mpi_wr_to_subaddr</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_wr_to_subaddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_release_busy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_set_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[150]"></a>mpi_rd_from_subaddr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mpi.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>mpi_block_transmitter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>mpi_amko_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL0_Handler
</UL>

<P><STRONG><a name="[44]"></a>INT_MIL0_Handler</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, mpi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INT_MIL0_Handler &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_amko_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>bdd_init</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, bdd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = bdd_init &rArr; adc_init &rArr; adc_set_ch_a_b
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>bdd_ctrl_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bdd.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>bdd_oai_dd_frame_form</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bdd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bdd_oai_dd_frame_form &rArr; mpi_int_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_int_frame_definer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_int_crc16
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[d1]"></a>bdd_system_frame_form</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, bdd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bdd_system_frame_form &rArr; mpi_int_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_int_frame_definer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_int_crc16
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[78]"></a>bdd_process</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bdd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = bdd_process &rArr; oai_dd_process &rArr; oai_dd_get_frame_report &rArr; tres_get_temp_u16 &rArr; tres_get_temp &rArr; _linear_interpolation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_process
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_system_frame_form
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_oai_dd_frame_form
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_wr_to_subaddr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>mpi_int_frame_definer</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, bdd_mpi_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_int_frame_definer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_system_frame_form
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_oai_dd_frame_form
</UL>

<P><STRONG><a name="[153]"></a>mpi_int_u32_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bdd_mpi_interface.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>mpi_int_crc16</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bdd_mpi_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpi_int_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_system_frame_form
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_oai_dd_frame_form
</UL>

<P><STRONG><a name="[d4]"></a>mvip_set_voltage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_init
</UL>

<P><STRONG><a name="[cc]"></a>mvip_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mvip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mvip_init &rArr; pid_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_set_voltage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[d3]"></a>mvip_process</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, mvip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mvip_process &rArr; pid_step_calc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PWM_Set_Fp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_ch_voltage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_set_desired_value
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[154]"></a>mvip_set_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvip.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>mvip_get_str_report</STRONG> (Thumb, 146 bytes, Stack size 216 bytes, mvip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[7e]"></a>filter_parameter_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, digital_filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>filter_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, digital_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_parameter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_init
</UL>

<P><STRONG><a name="[dc]"></a>filter_reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, digital_filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change
</UL>

<P><STRONG><a name="[c2]"></a>filter_process</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, digital_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = filter_process &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
</UL>

<P><STRONG><a name="[bb]"></a>filter_get_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, digital_filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
</UL>

<P><STRONG><a name="[d7]"></a>ims_reset_val</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ims.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_init
</UL>

<P><STRONG><a name="[cd]"></a>ims_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ims.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ims_init &rArr; filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_reset_val
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_parameter_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_init
</UL>

<P><STRONG><a name="[155]"></a>ims_set_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ims.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>ims_get_frame_report</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ims.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ims_get_frame_report &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_get_value
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_process
</UL>

<P><STRONG><a name="[da]"></a>ims_range_change_checking</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ims.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ims_range_change_checking &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change
</UL>

<P><STRONG><a name="[db]"></a>ims_range_change</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ims.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ims_range_change &rArr; ims_range_change_checking &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change_checking
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_simple_process
</UL>

<P><STRONG><a name="[dd]"></a>ims_simple_process</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ims.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ims_simple_process &rArr; ims_range_change &rArr; ims_range_change_checking &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_process
</UL>

<P><STRONG><a name="[d2]"></a>ims_process</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ims.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ims_process &rArr; ims_simple_process &rArr; ims_range_change &rArr; ims_range_change_checking &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_simple_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_ch_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_process
</UL>

<P><STRONG><a name="[156]"></a>ims_calibr_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ims.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>ims_get_str_report</STRONG> (Thumb, 114 bytes, Stack size 192 bytes, ims.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemoryMngFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryMngFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVCall_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCall_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCall_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Systick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FT_IF0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FT_IF1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FT_IF2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FT_IF3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_IF3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CLK_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BKP_IF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXT_INTERROR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXT_INTERROR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXT_INTERROR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXT_INTERROR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXT_INTERROR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXT_INTERROR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INTERROR6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXT_INTERROR7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INTERROR7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IF_ERR_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_ERR_SCR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IF_FIN_SCR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FIN_SCR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_ERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_DONE0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_DONE1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DONE1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ_PORTA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ_PORTB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ_PORTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ_PORTD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ_PORTE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ_PORTF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_PORTF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>INT_ETH0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>INT_ETH1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ETH1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>INT_SPW0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>INT_SPW1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SPW1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>INT_TMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>INT_TMR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>INT_TMR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TMR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>INT_CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>INT_CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>INT_CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>INT_CAN3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>INT_CAN4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CAN4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>INT_SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>INT_SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>INT_SSP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>INT_SSP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SSP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>INT_UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>INT_UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>INT_UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>INT_USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>INT_RX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>INT_TX_ARC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>INT_RX_ARC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_RX_ARC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>INT_TX_ARC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_TX_ARC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>INT_MIL1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>INT_ADC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ADC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>INT_DAC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>INT_DAC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_DAC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>INT_CRYPTO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRYPTO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRYPTO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>INT_CRC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_CRC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>INT_ECC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ECC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_ECC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve8t.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve8t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c4]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_str_report
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_get_str_report
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_str_report
</UL>

<P><STRONG><a name="[e6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[e7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[59]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[157]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[6c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_str_report
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_get_str_report
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_str_report
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_str_report
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdd_oai_dd_frame_form
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_get_str_report
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_str_report
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
</UL>

<P><STRONG><a name="[e4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[158]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_MIL0_Handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_str_report
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_get_str_report
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_str_report
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[e0]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15e]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[e5]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ed]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f0]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e9]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[160]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[161]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[66]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fd]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[6a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[162]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f7]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f9]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[fa]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[eb]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ec]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fb]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ef]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a4]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_voltage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_voltage
</UL>

<P><STRONG><a name="[5f]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[101]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[108]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
</UL>

<P><STRONG><a name="[105]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp_u16
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_voltage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_voltage
</UL>

<P><STRONG><a name="[106]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
</UL>

<P><STRONG><a name="[163]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change_checking
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_resistance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_current
</UL>

<P><STRONG><a name="[107]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[10b]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp_u16
</UL>

<P><STRONG><a name="[109]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[100]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[103]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change_checking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_resistance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_current
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[10a]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[10c]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
</UL>

<P><STRONG><a name="[10e]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_str_report
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_range_change_checking
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_get_str_report
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_get_str_report
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_str_report
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_resistance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_current
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tres_get_temp_u16
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_voltage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_voltage
</UL>

<P><STRONG><a name="[10f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_resistance
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_pid_current
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_voltage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_voltage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ch_voltage
</UL>

<P><STRONG><a name="[111]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[115]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_tr_res
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
</UL>

<P><STRONG><a name="[113]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_tr_res
</UL>

<P><STRONG><a name="[114]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PWM_Set_Fp
</UL>

<P><STRONG><a name="[116]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ch_voltage
</UL>

<P><STRONG><a name="[165]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mvip_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
</UL>

<P><STRONG><a name="[117]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[11a]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ims_get_frame_report
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oai_dd_get_frame_report
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_tr_res
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_ch_voltage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_voltage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PWM_Set_Fp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ch_voltage
</UL>

<P><STRONG><a name="[118]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[110]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[ff]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_PWM_Set_Fp
</UL>

<P><STRONG><a name="[119]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_step_calc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_tr_res
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_linear_interpolation
</UL>

<P><STRONG><a name="[11b]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[56]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[84]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uarts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_GetPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ch_voltage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[8e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_mcu_temp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ch_voltage
</UL>

<P><STRONG><a name="[96]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Init
</UL>

<P><STRONG><a name="[97]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Status
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timers_Start
</UL>

<P><STRONG><a name="[c6]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mpi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_init
</UL>

<P><STRONG><a name="[10d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[102]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[11c]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[112]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[e8]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
